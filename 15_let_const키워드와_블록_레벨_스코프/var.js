// var 변수의 특징
// 1. 중복 선언 허용
var x = 1;
var y = 1;

// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용한다.
// 초기화문이 있는 변수 선언문은 자바스크립트 엔진에 의해 var 키워드가 없는 것처럼 동작한다.
var x = 100;
// 초기화문이 없는 변수 선언문은 무시된다.
var y;

console.log(x); // 100
console.log(y); // 1

// 2. 함수 레벨 스코프 - 함수의 코드 블럭을 지역 스코프로 인정, 함수 외부에서 var로 선언한 변수는 코드 블럭 내에서 선언해도 전역 변수가 된다
var x = 1;

if (true) {
    // x는 전역 변수다. 이미 선언된 전역 변수 x가 있으므로 x 변수는 중복 선언된다.
    // 이는 의도치 않게 변수값이 변경되는 부작용을 발생시킨다.
    var x = 10;
}

console.log(x); // 10

var i = 10;

// for문에서 선언한 i는 전역 변수이다. 이미 선언된 전역 변수 i가 있으므로 중복 선언된다.
for (var i = 0; i < 5; i++) {
    console.log(i); // 0 1 2 3 4
}

// 의도치 않게 i 변수의 값이 변경되었다.
console.log(i); // 5

// 3. 변수 호이스팅 - 스코프의 선두로 끌어올려진 것처럼 동작하며, var 키워드로 선언한 변수는 변수 선언문 이전에 참조가 가능
// 이 시점에는 변수 호이스팅에 의해 이미 foo 변수가 선언되었다(1. 선언 단계)
// 변수 foo는 undefined로 초기화된다. (2. 초기화 단계)
console.log(foo); // undefined

// 변수에 값을 할당(3. 할당 단계)
foo = 123;

console.log(foo); // 123

// 변수 선언은 런타임 이전에 자바스크립트 엔진에 의해 암묵적으로 실행된다.
var foo;

// 변수 선언문 이전에 변수를 참조하는 것은 변수 호이스팅에 의해 에러를 발생시키지는 않지만
// 프로그램의 흐름상 맞지 않을뿐더러 가독성을 떨어뜨리고 오류를 발생시킬 여지가 있다.


// vas VS. let VS. const

// 변수 선언에는 기본적으로 const를 사용하고, let은 재할당이 필요한 경우에 한정해 사용한느 것이 좋다.
// const 키워드를 사용하면 의도치 않은 재할당을 방지하기 때문에 좀 더 안전하다.

// 1. ES6 이상을 사용한다면 var는 사용하지 않는다
// 2. 재할당이 필요한 경우에 한정해 let 키워드를 사용한다. 이 때 변수의 스코프는 최대한 좁게 만든다.
// 3. 변경이 발생하지 않고 읽기 전용으로 사용하는(재할당이 필요 없는 상수) 원시 값과 객체에는 const 키워드를 사용한다.

// 변수를 선언하는 시점에는 재할당 여부 파악이 어려우므로 const를 쓰자
// 반드시 재할당이 필요하다면 재할당 필요 여부를 꼼꼼히 고려한 뒤에 let으로 변경하거나 하자.
