// 쉼표 연산자
// 왼쪽 피연산자부터 차례대로 피연산자를 평가하고 마지막 피연산자의 평가가 끝나면 마지막 피연산자의 평가 결과를 반환한다.
var x, y, z;

x = 1, y = 2, z = 3; // 3

// 그룹 연산자
10 * 2 + 3; // -> 23

// 그룹 연산자를 사용하여 우선순위를 조절, 그룹 연산자는 연산자 우선순위가 가장 높다.
10 * (2 + 3); // -> 50

// typeof 연산자는 피연산자의 데이터 타입을 문자열로 반환한다.
// typeof 연산자가 반환하는 문자열은 7개의 데이터 타입과 정확히 일치하지는 않는다.
typeof ''              // -> "string"
typeof 1               // -> "number"
typeof NaN             // -> "number"
typeof true            // -> "boolean"
typeof undefined       // -> "undefined"
typeof Symbol()        // -> "symbol"
typeof null            // -> "object" 자바스크립트의 첫 번째 버전의 버그. 아직 수정되지 못하고 있다.
typeof []              // -> "object"
typeof {}              // -> "object"
typeof new Date()      // -> "object"
typeof /test/gi        // -> "object"
typeof function () {}  // -> "function"

// null을 확인할때는 일치 연산자를 쓰자 (===)
let foo = null;

typeof foo === null; // -> false
foo === null;        // -> true

// 선언하지 않은 식별자를 typeof 연산자로 연산해보면 undefined를 반환한다.

// undeclared 식별자를 선언한 적이 없다.
typeof undeclared; // -> undefined

// 지수 연산자는 ES7에서 도입되었으며 지수 연산자는 좌항의 피연산자를 밑으로, 우항의 피연잔사를 지수로 거듭제곱하여 숫자 값을 반환한다.
2 ** 2;   // -> 4
2 ** 2.5; // -> 5.65685424949238
2 ** 0;   // -> 1
2 ** -2;  // -> 0.25

// 지수 연산자가 도입되기 전에는 Math.pow 메서드를 사용했다.
Math.pow(2, 2);   // -> 4
Math.pow(2, 2.5); // -> 5.65685424949238
Math.pow(2, 0);   // -> 1
Math.pow(2, -2);  // -> 0.25

// 지수 연산자는 Math.pow 메서드보다 가독성이 좋을 때가 있다.
2 ** 2 ** 2; // -> 16
Math.pow(Math.pow(2, 2), 2); // -> 16

// 음수를 밑으로 사용해 계산하려면 괄호로 묶어야 한다
// -5 ** 2;
// SyntaxError: Unary operator used immediately before exponentiation expression.
// Parenthesis must be used to disambiguate operator precedence

(-5) ** 2; // -> 25

// 지수 연산자는 다른 산술 연산자처럼 할당 연산자와 함께 사용 가능하다.
let num = 5;
num **= 2; // -> 25

// 지수 연산자는 이항 연산자 중에서 우선순위가 가장 높다.
2 * 5 ** 2; // -> 50

// 일부 연산자는 다른 코드에 영향을 주는 부수효과가 있다.
let x;

// 할당 연산자는 변수 값이 변하는 부수 효과가 있다.
// 이는 x 변수를 사용하는 다른 코드에 영향을 준다.
x = 1;
console.log(x); // 1

// 증가/감소 연산자(++/--)는 피연산자의 값을 변경하는 부수 효과가 있다.
// 피연산자 x의 값이 재할당되어 변경된다. 이는 x 변수를 사용하는 다른 코드에 영향을 준다.
x++;
console.log(x); // 2

let o = { a: 1 };

// delete 연산자는 객체의 프로퍼티를 삭제하는 부수 효과가 있다.
// 이는 o 객체를 사용하는 다른 코드에 영향을 준다.
delete o.a;
console.log(o); // {}

// 연산자가 여러개일 경우 우선순위에 따라 실행된다
/*
* 1. () 그룹연산자
* 2. new(매개변수), ., [](프로퍼티 접근), ()(함수 호출), ?.(옵셔널 체이닝 연산자)
* 3. new(매개변수 미존재)
* 4. x++, x--
* 5. !x, +x, -x, ++x, --x, typeof, delete
* 6. ** (이항 연산자 중에서 우선순위가 가장 높다)
* 7. *, /, %
* 8. +, -
* 9. <, <=, >, >=, in, instanceof
* 10. ==, !=, ===, !==
* 11. ??(null 병합 연산자)
* 12. &&
* 13. ||
* 14. ? ... : ...
* 15. 할당 연산자(=, +=, -=, ...)
* 16. ,
 */

// 그룹 연산자를 사용하여 우선순위를 명시적으로 조절
10 * (2 + 3); // -> 50

// 연산자 결합순서란 연산자의 어느 쪽(좌,우)부터 평가를 수행할 것인지를 나타내는 순서를 말한다.
// 결합순서 좌->우
// +,-,/,%,<,<=,>,>=,&&,||,.,[],(),??,?.,in,instanceof
// 결합순서 우->좌
// ++,--,할당연산자(=,+=,-=,...),!x,+x,-x,++x,--x,typeof,delete, ? ... : ...
