// 스코프의 종류
// 코드는 전역global 과 지역local로 구별 가능하다
// 전역- 코드의 가장 바깥영역, 지역 - 함수 몸체 내부
// 자신이 선언된 위치에 의해 유효범위가 결정된다.

// 전역에 변수를 선언하면 전역 변수가 된다. 전역 변수는 어디서든지 참조할 수 있다
// 지역이란 함수 몸체 내부를 말한다. 지역은 지역 스코프를 만든다.
// 지역 변수는 자신이 선언된 지역과 하위 지역(중첩 함수)에서만 참조할 수 있다.
// 즉, 지역 변수는 자신의 지역 스코프와 하위 지역 스코프에서 유효하다.

// 스코프 체인
// 함수는 중첩될 수 있으므로 함수의 지역 스코프도 중첩될 수 있다. 이는 스코프가 함수의 중첩에 의해 계층적 구조를 갖는다는 것을 의미한다.
// 모든 스코프는 하나의 계층적 구조로 연결되며, 모든 지역 스코프의 최상위 스코프는 전역 스코프다.
// 이러한 계층적 연결을 스코프 체인이라고 한다.

// 변수를 참조할 때 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여 상위 스코프 방향으로 이동하며 선언된 변수를 검색 한다.
// 이를 통해 상위 스코프에서 선언한 변수를 하위 스코프에서도 참조할 수 있다.
// 상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 있지만, 하위 스코프에서 유효한 변수를 상위 스코프에서 참조할 수 없다.

// 전역 함수
function foo() {
    console.log('global function foo');
}

function bar() {
    // 중첩 함수
    function foo() {
        console.log('local function foo');
    }

    foo();
}

bar(); // local function foo

// 함수 레벨 스코프
// 지역 스코프는 코드 블록이 아닌 함수에 의해서만 지역 스코프가 생성된다는 의미다. (이것은 var로 선언했을때의 기준이다)
var x = 1;

if (true) {
    // var 키워드로 선언된 변수는 함수의 코드 블록(함수 몸체)만을 지역 스코프로 인정한다.
    // 함수 밖에서 var 키워드로 선언된 변수는 코드 블록 내에서 선언되었다 할지라도 모두 전역 변수다.
    // 따라서 x는 전역 변수다. 이미 선언된 전역 변수 x가 있으므로 x 변수는 중복 선언된다.
    // 이는 의도치 않게 변수 값이 변경되는 부작용을 발생시킨다.
    var x = 10;
}

console.log(x); // 10


var i = 10;

// for 문에서 선언한 i는 전역 변수다. 이미 선언된 전역 변수 i가 있으므로 중복 선언된다.
for (var i = 0; i < 5; i++) {
    console.log(i); // 0 1 2 3 4
}

// 의도치 않게 변수의 값이 변경되었다.
console.log(i); // 5
// let과 const는 블록레벨 스코프를 지원한다. 그래서 var의 사용은 ES6 이후로는 기피한다.

// 렉시컬 스코프
// 동적 스코프 - 함수가 호출되는 시점에 동적으로 상위 스코프를 결정
// 렉시컬 스코프 or 정적 스코프 - 함수 정의가 평가되는 시점에 상위 스코프가 정적으로 결정
// 자바스크립트는 렉시컬 스코프를 따르므로 함수를 어디서 호출했는지가 아니라 함수를 어디서 정의했는지에 따라 상위 스코프를 결정.
// 함수가 호출된 위치는 상위 스코프 결정에 어떠한 영향도 주지 않는다. 즉, 함수의 상위 스코프는 언제나 자신이 정의된 스코프다.
// 함수의 상위 스코프는 함수 정의가 실행될 때 정적으로 결정된다.
0
var x = 1;

function foo() {
    var x = 10;
    bar();
}

function bar() { // 함수선언문으로 전역에서 정의된 함수. 전역 코드가 실행되기 전에 먼저 평가되어 함수 객체를 생성. 전역 스코프를 상위 스코프로 기억한다.
    console.log(x);
}

foo(); // ? 1
bar(); // ? 1