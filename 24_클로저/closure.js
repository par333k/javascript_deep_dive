// 클로저는 함수와 그 함수가 선언된 렉시컬 환경과의 조합이다 - MDN 정의
// 함수가 선언된 렉시컬 환경이란?
const x = 1;

function outerFunc() {
    const x = 10;

    function innerFunc() { // 상위 스코프는 외부 함수 outerFunc의 스코프, 외부 x변수에 접근이 가능하다.
        console.log(x); // 10
    }

    innerFunc();
}

outerFunc();

// innerFunc 함수가 outerFunc 함수의 내부에서 정의된 중첩 함수가 아니라면 outerFunc() 안에서 호출하더라도 outerFunc 변수에 접근할 수 없다
const x = 1;

function outerFunc() {
    const x = 10;
    innerFunc();
}

function innerFunc() {
    console.log(x); // 1
}

outerFunc();


// 다시 한번 렉시컬 스코프!
// 자바스크립트 엔진은 함수를 어디서 호출했는지가 아니라 함수를 어디에 정의했는지에 따라 상위 스코프를 결정한다. 이를 렉시컬 스코프라 한다
// (혹은 정적 스코프)

const x = 1;

function foo() {
    const x = 10;
    bar();
}

function bar() {
    console.log(x);
}

foo(); // ? -> 1
bar(); // ? -> 1
// 정의된 위치가 전역이므로 상위 스코프는 전역이다. 따라서 어디서 호출하더라도 스코프 결정에는 영향을 주지 않는다.
// 즉, 함수의 상위 스코프는 함수를 정의한 위치에 의해 정적으로 결정되고 변하지 않는다.
// 스코프의 실체는 실행 컨텍스트의 렉시컬 환경이다. 이 렉시컬 환경은 자신의 "외부 렉시컬 환경에 대한 참조"를 통해 상위 렉시컬 환경과 연결된다.
// 이것이 스코프 체인이다. 렉시컬 환경의 "외부 렉시컬 환경에 대한 참조"에 저장할 참조값이 상위 스코프이다.
// 결국, 상위 스코프에 대한 참조는 함수 정의가 평가되는 시점에 함수가 정의된 환경(위치)에 의해 결정된다. 이것이 바로 렉시컬 스코프다.


// 함수 객체의 내부 슬롯 [[Environment]]
// 렉시컬 스코프가 가능하려면 함수는 자신이 호출되는 환경과는 상관없이 자신의 정의된 환경을 기억해야한다.
// 이를 위해 함수는 자신의 내부 슬롯 [[Environment]]에 자신이 정의된 환경, 즉 상위 스코프의 참조를 저장한다.
// 함수 객체는 내부 슬롯 [[Enviornment]]에 저장한 렉시컬 환경의 참조, 즉 상위 스코프를 자신이 존재하는 한 기억한다.
const x = 1;

function foo() {
    const x = 10;

    // 상위 스코프는 함수 정의 환경(위치)에 따라 결정된다.
    // 함수 호출 위치와 상위 스코프는 아무런 관계가 없다.
    bar();
}

// 함수 bar는 자신의 상위 스코프, 즉 전역 렉시컬 환경을 [[Environment]]에 저장하여 기억한다.
function bar() {
    console.log(x);
}

foo(); // ?
bar(); // ?
// 전역에서 함수 선언문으로 정의된 foo와 bar 함수는 전역 코드가 평가되는 시점에 평가되어 객체를 생성하고 전역객체의 메서드가 된다.
// 이 때 전역 코드 평가 시점에 실행중인 실행 컨텍스트의 렉시컬 환경인 전역 렉시컬 환경의 참조가 저장된다.
// 함수가 호출되면 함수 내부로 코드의 제어권이 이동하고 코드를 평가한다.
// 이 때 함수 실행 컨텍스트가 생성되고 함수 렉시컬 환경이 생성될 때, 구성요소인 외부 렉시컬 환경에 대한 참조에는
// 함수 객체의 내부 슬롯 [[Enviornment]] 에 저장된 렉시컬 환경의 참조가 할당된다.
// 이것이 함수의 상위 스코프를 결정하는 렉시컬 스코프의 실체다.


// 클로저와 렉시컬 환경
const x = 1;

// ①
function outer() {
    const x = 10;
    const inner = function () { console.log(x); }; // ②
    return inner;
}

// outer 함수를 호출하면 중첩 함수 inner를 반환한다.
// 그리고 outer 함수의 실행 컨텍스트는 실행 컨텍스트 스택에서 팝되어 제거된다.
const innerFunc = outer(); // ③
innerFunc(); // ④ 10

// inner 함수를 반환하고 outer()는 생명주기를 마감한다. 그렇기 때문에 지역변수 x는 유효하지 않아야한다
// 그러나 innerFunc()를 호출하면 실제로 10이 나타난다.
// 이처럼 외부함수보다 중첩함수가 더 오래 유지되는 경우, 중첩 함수는 이미 생명 주기가 종료된 외부 함수의 변수를 참조할 수 있다.
// 이런 중첩 함수를 클로저라고 부른다.

// [[Environment]]에 상위 스코프를 저장하는 것은 함수의 정의된 위치에 의해 평가되는 과정에서 저장된다.
// 상위 스코프의 함수 실행이 종료되어 생명주기가 종료되고 실행 컨텍스트 스택에서 제거되더라도 렉시컬 환경까지 소멸하는 것은 아니다
// 왜냐하면, 예제의 outer 함수의 경우 inner 함수의[[Environment]] 내부 슬롯에 의해 참조되고 있고
// inner 함수는 전역 변수 innerFunc에 의해 참조되고 있으므로 가비지 컬렉션의 대상이 되지 않기 떄문이다.
// 가비지 컬렉터는 누군가가 참조하고 있는 메모리 공간을 함부로 해제하지 않는다.
// 이로서 중첩함수 inner는 외부 함수 outer 보다 더 오래 생존했고, 상위 스코프를 참조할 수 있기 때문에
// 상위 스코프의 식별자를 참조할 수 있고 식별자의 값을 변경할 수도 있다.

// 자바스크립트의 모든 함수는 이론적으로 클로저다. 하지만 일반적으로 모든 함수를 클로저라고 하지는 않는다.

function foo() {
    const x = 1;
    const y = 2;

    // 일반적으로 클로저라고 하지 않는다.
    function bar() {
    const z = 3;

    // 상위 스코프의 식별자를 참조하지 않는다.
    console.log(z);
    }
    return bar;
}

const bar = foo();
bar();
// 위 예제의 중첩함수 bar는 외부 함수 foo 보다 더 오래 유지되지만 상위 스코프의 어떤 식별자도 참조하지않는다.
// 이 경우, 대부분의 모던 브라우저는 최적화를 통해 다음 그림과 같이 상위 스코프를 기억하지 않는다.
// 참조하지도 않는 식별자를 기억하는 것은 메모리 낭비이기 때문이다.

function foo() {
    const x = 1;

    // 일반적으로 클로저라고 하지 않는다.
    // bar 함수는 클로저였지만 곧바로 소멸한다.
    function bar() {
        // 상위 스코프의 식별자를 참조한다.
        console.log(x);
    }
    bar();
}

foo();
// 위 예제의 bar는 상위 스코프의 식별자를 참조하고 있으므로 클로저다
// 하지만 외부 함수 foo의 외부로 중첩함수 bar가 반환되지 않는다.
// 즉, 외부 함수 foo 보다 중첩 함수 bar의 생명주기가 짧다
// 이 경우 bar는 클로저라고 하지 않는다. 생명주기가 종료된 외부 함수의 식별자를 참조할 수 있다는 클로저의 본질에 부합하지 않기 때문이다.


function foo() {
    const x = 1;
    const y = 2;

    // 클로저
    // 중첩 함수 bar는 외부 함수보다 더 오래 유지되며 상위 스코프의 식별자를 참조한다.
    function bar() {
        console.log(x);
    }
    return bar;
}

const bar = foo();
bar();
// 클로저는 중첩 함수가 상위 스코프의 식별자를 참조하고 있고, 중첩 함수가 외부 함수보다 더 오래 유지되는 경우에 한정하는 것이 일반적이다.
// 위의 경우 모던 브라우저는 메모리 최적화를 위해 참조하는 x외의 y식별자는 메모리에서 해제해버린다.
// 클로저에 의해 참조되는 상위 스코프의 변수를 자유 변수라고 부른다(위 예제에서 x)
// 클로저의 의미란 함수가 자유 변수에 대해 닫혀closed 있다는 의미로, 자유 변수에 묶여있는 함수라고 이해할 수 있다.


