// 함수는 자바스크립트에서 가장 중요한 핵심 개념
// 프로그래밍 언어의 함수는 일련의 과정을 문statement으로 구현하고 코드 블록으로 감싸서 하나의 실행 단위로 정의한 것
// f(x, y) = x + y

// 함수 정의
// x, y 는 매개변수
// add는 함수이름
function add(x, y) {
    return x + y; //반환값
}

// f(2, 5) = 7
// 2, 5는 인수
add(2, 5); // 7 , 함수 호출

// 함수를 사용하는 이유 - 몇 번이든 호출 가능하므로 코드의 재사용이라는 측면에서 좋다
// 재사용성을 높이면 유지보수의 편의성을 높이고 코드의 신뢰성도 높아진다.
// 함수는 객체 타입의 값으로, 식별자를 붙일 수 있다. 함수 이름이 함수의 역할을 잘 설명한다면 코드의 가독성도 높아진다.
// 함수는 객체지만 일반 객체와 다르다. 일반 객체는 호출할 수 없지만 함수는 호출할 수 있다.
// 그리고 일반 객체에는 없는 함수 객체만의 고유한 프로퍼티를 갖는다.
// 함수 정의 방식의 4가지, 선언문, 표현식, function 생성자 함수, 화살표 함수
// 변수는 선언declaration 한다고 하지만 함수는 정의definition 한다고 표현한다.
// 함수 선언문이 평가되면 식별자가 암묵적으로 생성되고 함수 객체가 할당되기 때문이다.

// 함수 선언문 - 함수 선언문은 이름을 생략할 수 없다. 선언문은 표현식이 아닌 문이다. 즉, 선언문은 변수에 할당할 수 없다.
function add(x, y) {
    return x + y;
}

// 함수 선언문은 표현식이 아닌 문이므로 변수에 할당할 수 없다.
// 하지만 함수 선언문이 변수에 할당되는 것처럼 보인다.
// 자바스크립트 엔진이 코드의 문맥에 따라 동일한 함수 리터럴을 표현식/문으로 알아서 해석하는 경우가 있기 때문
const add = function add(x, y) {
    return x + y;
};

// 기명 함수 리터럴을 단독으로 사용하면 함수 선언문으로 해석된다.
// 함수 선언문에서는 함수 이름을 생략할 수 없다.
function foo() { console.log('foo'); }
foo(); // foo

// 함수 리터럴을 피연산자로 사용하면 함수 선언문이 아니라 함수 리터럴 표현식으로 해석된다.
// 함수 리터럴에서는 함수 이름을 생략할 수 있다.
// (function bar() { console.log('bar'); });
// bar(); // ReferenceError: bar is not defined
// bar() 는 그룹연산자 () 내에 있어서 리터럴 표현식으로 해석된다. 그룹 연산자의 피연산자는 값으로 평가될 수 있어야 한다. 따라서 표현식이 문이 아닌 함수 선언문은 피연산자로 사용할 수 없다.
// 자바스크립트 엔진은 생성된 함수를 호출하기 위해 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성하고, 거기에 함수 객체를 할당한다.
// 함수는 함수 이름으로 호출하는 것이 아니라 함수 객체를 가리키는 식별자로 호출한다.
// 결론적으로 자바스크립트 엔진은 함수 선언문을 함수 표현식으로 변환해 함수 객체를 생성한다고 생각할 수 있다.
// 단 함수 선언문과 함수 표현식이 정확히 동일하게 동작하는 것은 아니다.

// 함수 호출
console.log(add(2, 5)); // 7

// 함수 참조
// console.dir은 console.log와는 달리 함수 객체의 프로퍼티까지 출력한다.
// 단, Node.js 환경에서는 console.log와 같은 결과가 출력된다.
console.dir(add); // ƒ add(x, y)

// 자바스크립트의 함수는 일급 객체다.
// 값의 성질을 갖는 객체를 일급 객체라고 한다.
// 함수 표현식
const add = function (x, y) {
    return x + y;
};

console.log(add(2, 5)); // 7

// 기명 함수 표현식
const add = function foo (x, y) {
    return x + y;
};

// 함수 객체를 가리키는 식별자로 호출
console.log(add(2, 5)); // 7

// 함수 이름으로 호출하면 ReferenceError가 발생한다.
// 함수 이름은 함수 몸체 내부에서만 유효한 식별자다.
console.log(foo(2, 5)); // ReferenceError: foo is not defined

// 함수 선언문은 표현식이 아닌 문이고 함수 표현식은 표현식인 문이다. 차이가 있다.
// 함수 참조
console.dir(add); // ƒ add(x, y)
console.dir(sub); // undefined

// 함수 호출
// 함수 선언문으로 정의한 함수와 함수 표현식으로 정의한 함수의 생성 시점이 다르다.
// 선언문은 런타임 이전에 객체가 생성되고, 런타임에는 이미 함수 이름과 동일한 식별자에 할당까지 완료되어 참조가 가능하다
// 이것을 함수 호이스팅이라 한다.
// 변수 호이스팅은 undefined로 초기화 되지만 함수 호이스팅은 함수 객체로 초기화 된다.
// 함수 표현식은 변수에 할당되는 값이 함수 리터럴인 문이다. 
// 변수 할당문의 값은 할당문이 실행되는 시점, 즉 런타임에 평가되므로 함수 표현식의 함수 리터럴도 할당문이 실행되는 시점에 평가되어 함수 객체가 된다.
// 따라서 함수 표현식으로 함수를 정의하면 함수 호이스팅이 발생하는 것이 아니라 변수 호이스팅이 발생한다.
// 즉, 선언식이 아닌 표현식으로 정의한 함수는 반드시 표현식 이후에 참조 또는 호출해야한다
// 함수 호이스팅을 피하기 위해 함수 선언문 대신 함수 표현식을 사용할 것을 권장한다.

console.log(add(2, 5)); // 7
console.log(sub(2, 5)); // TypeError: sub is not a function

// 함수 선언문
function add(x, y) {
    return x + y;
}

// 함수 표현식
const sub = function (x, y) {
    return x - y;
};

// function 생성자 함수
// 생성자 함수로 생성한 함수는 클로저를 생성하지 않는다.
const add = new Function('x', 'y', 'return x + y');

console.log(add(2, 5)); // 7

const add1 = (function () {
    let a = 10;
    return function (x, y) {
        return x + y + a;
    };
}());

console.log(add1(1, 2)); // 13

const add2 = (function () {
    let a = 10;
    return new Function('x', 'y', 'return x + y + a;');
}());

console.log(add2(1, 2)); // ReferenceError: a is not defined

// 화살표 함수 - 항상 익명함수로 정의한다
// 화살표 함수는 생성자 함수로 사용할 수 없으며
// 기존 함수와 this 바인딩 방식이 다르고, prototype 프로퍼티가 없으며 arguments 객체를 생성하지 않는다.
const add = (x, y) => x + y;
console.log(add(2, 5)); // 7